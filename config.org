#+TITLE: GNU Emacs config
#+AUTHOR: idsyr
#+DESCRIPTION: GNU Emacs config in .org format
#+STARTUP: showeveryhing
#+OPTIONS: toc:2



* Basic
#+begin_src emacs-lisp

	;; Clean up buffers
	(setq inhibit-startup-screen t)
	(add-hook 'emacs-startup-hook
						(lambda ()
							(setq-default message-log-max nil)
							(kill-buffer "*Messages*")
							(setq initial-scratch-message "")
							(kill-buffer "*scratch*")
							))

	;; NYAAA~
	(setq backup-directory-alist '((".*" . "~/.emacs_backup")))

	;; GUI settings
	(menu-bar-mode   -1)
	(tool-bar-mode   -1)

	(scroll-bar-mode -1)
	(global-display-line-numbers-mode 1)
	(global-visual-line-mode -1)


	;; Auto update on file changing 
	(global-auto-revert-mode t)

	;; M-i length
	(setq-default tab-width 2)

	;; RET 
	(electric-indent-mode -1)

	;; Scripts, package manager
	(add-to-list 'load-path "~/.config/emacs/scripts/")
	(require 'elpaca-setup)

#+end_src



* Evil Mode
#+begin_src emacs-lisp

	(use-package evil :ensure t  
		:init
		(setq evil-want-integration    t)
		(setq evil-want-keybinding     nil)
		(setq evil-vsplit-window-right t)
		(setq evil-split-window-below  t)
		(evil-mode))

	(use-package evil-collection :ensure t  
		:after evil
		:config
		(setq evil-collection-mode-list '(dashboard dired ibuffer))
		(evil-collection-init))

	(with-eval-after-load 'evil-maps
		(define-key evil-motion-state-map (kbd "SPC") nil)
		(define-key evil-motion-state-map (kbd "RET") nil)
		(define-key evil-motion-state-map (kbd "TAB") nil))

	(setq org-return-follows-link t)

#+end_src



* General Keybindings
#+begin_src emacs-lisp

	(global-set-key [escape] 'keyboard-escape-quit)

	(defun reload-init-file()
		(interactive)
		(load-file "~/.config/emacs/init.el")
		(ignore (elpaca-process-queues))
		(run-hooks 'after-init-hook)
		)

	(use-package general :ensure t  
		:config
		(general-evil-setup)

		(general-create-definer idsyr/leader-keys
			:states        '(normal insert visual emacs)
			:keymaps       'override
			:prefix        "SPC"
			:global-prefix "M-SPC")

		(idsyr/leader-keys
			"SPC" '(counsel-M-x         :wk "counsel M-x")
			"."   '(find-file           :wk "find file")
			"f c" '((lambda () (interactive)
								(find-file "~/.config/emacs/config.org"))
																	:wk "edit emacs config")
			"f r" '(counsel-recentf     :wk "find recent files")
			"TAB TAB" '(comment-line    :wk "comment lines"))

		(use-package sudo-edit :ensure t  
			:config
			(idsyr/leader-keys
				"s u" '(sudo-edit         :wk "sudo edit")))
    (idsyr/leader-keys
        "h"     '(:ignore t         :wk "help")
        "h r r" '(reload-init-file  :wk "reload init file"))

		(idsyr/leader-keys
			"b"   '(:ignore t					  :wk "buffer")
			"b b" '(switch-to-buffer		:wk "switch buffer")
			"b i" '(ibuffer             :wk "i buffer")
			"b k" '(kill-this-buffer    :wk "kill buffer")
			"b n" '(next-buffer         :wk "next buffer")
			"b p" '(previous-buffer     :wk "previous buffer")
			"b r" '(revert-buffer       :wk "reload buffer")
			"b R" '(rename-buffer       :wk "rename buffer")
			"b s" '(basic-save-buffer   :wk "save buffer")
			"b S" '(save-some-buffer		:wk "save multiple buffers")
			"b w" '(bookmark-save				:wk "save current bookmarks to bookmark file")
			"b c" '(clone-indirect-buffer	
																	:wk "create inderrect buffer in a split")
			"b C" '(clone-indirect-buffer-other-window 
																	:wk "clone indirect buffer in other window")
			"b K" '(kill-some-buffers   :wk "kill multiple buffers")
			"b l" '(list-bookmarks      :wk "list bookmarks")
			"b m" '(bookmark-set        :wk "set bookmark")
			"b d" '(bookmark-delete     :wk "delete bookmark"))

		(require 'buffer-move)
		(idsyr/leader-keys
			"w"   '(:ignore t           :wk "window")
			"w c" '(evil-window-delete  :wk "close window")
			"w n" '(evil-window-new     :wk "new window")
			"w s" '(evil-window-split   :wk "horizontal split window")
			"w v" '(evil-window-vsplit  :wk "vertical split window")
			"w h" '(evil-window-left    :wk "window left")
			"w j" '(evil-window-down    :wk "window down")
			"w k" '(evil-window-up      :wk "window up")
			"w l" '(evil-window-right   :wk "window right")
			"w w" '(evil-window-next    :wk "goto next window")
			"w H" '(buf-move-left       :wk "buffer move left")
			"w J" '(buf-move-down       :wk "buffer move down")
			"w K" '(buf-move-up         :wk "buffer move up")
			"w L" '(buf-move-right      :wk "buffer move right"))

		(idsyr/leader-keys
			"t"   '(:ignore t           :wk "toggle")
			"t l" '(display-line-numbers-mode
																	:wk "toggle line numbers")
			"t t" '(visual-line-mode    :wk "toggle truncated lines")
			"t v" '(vterm-toggle        :wk "toggle vterm"))

		(global-set-key (kbd "C-=")            'text-scale-increase)
		(global-set-key (kbd "C--")            'text-scale-decrease)
		(global-set-key (kbd "<C-wheel-up>")   'text-scale-increase)
		(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
	)

#+end_src



* Which-Key
#+begin_src emacs-lisp

	(use-package which-key :ensure t  
		:init (which-key-mode 1)
		:config
		(setq which-key-side-window-location 'bottom
					which-key-sort-order                 #'which-key-key-order
					which-key-sort-uppercase-first       nil
					which-key-add-column-padding         1
					which-key-max-display-columns        nil
					which-key-min-display-lines          6
					which-key-side-window-slot           -10
					which-key-side-window-max-height     0.25
					which-key-idle-delay                 0.8
					which-key-max-description-length     25
					which-key-allow-imprecise-window-fit nil
					which-key-separator                  " :=> " ))

#+end_src



* IVY
#+begin_src emacs-lisp

	(use-package ivy :ensure t  
		:bind
		(("C-c C-r" . ivy-resume)
		 ("C-x B"   . ivy-switch-buffer-other-window))
		:custom
		(setq ivy-use-virtual-buffers t)
		(setq ivy-count-format "(%d/%d) ")
		(setq enable-recursive-minibuffers t)
		:config
		(ivy-mode))

	(use-package ivy-rich :ensure t  
		:after ivy
		:init (ivy-rich-mode 1)
		:custom
		(ivy-virtual-abbreviate 'full
														ivy-rich-switch-buffer-align-virtual-buffer t
														ivy-rich-path-style 'abbrev)
		:config
		(ivy-set-display-transformer 'ivy-switch-buffer
																 'ivy-rich-switch-buffer-transformer))

	(use-package all-the-icons-ivy-rich :ensure t  
		:init (all-the-icons-ivy-rich-mode 1))

	(use-package counsel :ensure t  
		:after ivy
		:config (counsel-mode))

#+end_src



* Vterm
#+begin_src emacs-lisp

	(use-package vterm :ensure t 
		:config
		(setq shell-file-name "/bin/sh"
					vterm-max-scrollback 5000))

	(use-package vterm-toggle :ensure t 
		:after vterm
		:config
		(setq vterm-toggle-fullscreen-p nil)
		(setq vterm-toggle-scope 'project)
		(add-to-list 'display-buffer-alist
								 '((lambda (buffer-or-name _)
										 (let ((buffer (get-buffer buffer-or-name)))
											 (with-current-buffer buffer
												 (or (equal major-mode 'vterm-mode)
														 (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
									 (display-buffer-reuse-window display-buffer-at-bottom)
									 (reusable-frames . visible)
									 (window-height . 0.3)))) 

#+end_src



* Lang support
#+begin_src emacs-lisp

	(use-package lua-mode     :ensure t)
	(use-package verilog-mode :ensure t)
	(use-package php-mode     :ensure t)
	(use-package haskell-mode :ensure t)

#+end_src



* Flycheck
#+begin_src emacs-lisp

	(use-package flycheck
		:ensure t
		:defer t
		:diminish
		:init (global-flycheck-mode))

#+end_src



* Company
#+begin_src emacs-lisp

	(use-package company :ensure t
		:defer 2
		:diminish
		;;:init 
		;;(add-hook 'after-init-hook 'global-company-mode)
		:custom
		(company-begin-commands '(self-insert-command))
		(company-idle-delay .1)
		(company-minimum-prefix-length 2)
		(company-show-numbers t)
		(company-tooltip-align-annotations 't)
		(global-company-mode t))

	(use-package company-box :ensure t
		:after company
		:diminish
		:hook (company-mode . company-box-mode))

#+end_src




* Theme
#+begin_src emacs-lisp

	(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
	(add-hook 'after-init-hook
						(lambda ()
							(load-theme 'challom)
							))
	;;transparency
	(add-to-list 'default-frame-alist '(alpha-background . 80))

#+end_src



* Fonts
#+begin_src emacs-lisp

	(set-face-attribute 'default nil
											:font "Mononoki Nerd Font"
											:height 110
											:weight 'medium)
	(set-face-attribute 'variable-pitch nil
											:font "Mononoki Nerd Font"   ;;"DejaVu Sans"
											:height 110
											:weight 'medium)
	(set-face-attribute 'fixed-pitch nil
											:font "Mononoki Nerd Font"
											:height 110
											:weight 'medium)
	(set-face-attribute 'font-lock-comment-face nil
											:slant 'italic)
	(set-face-attribute 'font-lock-keyword-face nil
											:slant 'italic)
	(add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font-11"))
	(setq-default line-spacing 0.12)

#+end_src



* Icons
#+begin_src emacs-lisp

	(use-package all-the-icons :ensure t
		:if (display-graphic-p)
		)

	(use-package all-the-icons-dired :ensure t  
		:hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src



* Dashboard
#+begin_src emacs-lisp

	(use-package dashboard :ensure t
		:init
		(setq intial-buffer-choice 'dashboard-open)
		(setq dashboard-set-heading-icons t)
		(setq dashboard-icon-type 'all-the-icons)
		(setq dashboard-set-file-icons t)
		(setq dashboard-banner-logo-title "EMACS here. Why isn't your video feed working?")
		(setq dashboard-startup-banner "/home/ids/.config/emacs/emacs_dash_1.gif")
		(setq dashboard-center-content nil)
		(setq dashboard-items '((recents . 5)
														(agenda . 5)
														(bookmarks . 3)
														(registers . 3)
														))
		:config
		(dashboard-setup-startup-hook)
		(dashboard-modify-heading-icons '((recents . "file-text")
																			(bookmarks . "book")))
		)

#+end_src



* Modeline
#+begin_src emacs-lisp

	(use-package doom-modeline :ensure t
		:init (doom-modeline-mode 1)
		:config
		(setq doom-modeline-height 0
					doom-modeline-bar-width 0
					doom-modeline-persp-name t
					doom-modeline-persp-icon t))

	(use-package diminish :ensure t)

#+end_src



* Highlightning
#+begin_src emacs-lisp

	(use-package hl-todo :ensure t
		:hook ((org-mode . hl-todo-mode)
					 (prog-mode . hl-todo-mode))
		:config
		(setq hl-todo-highlight-punctuation ":"
					hl-todo-keyword-faces
					'(("TODO"    warning    italic bold)
						("FIXME"   error italic bold)
						("HACK"    font-lock-constant-face italic bold)
						("REVIEW"  font-lock-keyword-face italic bold)
						("DEPRECATED" font-lock-doc-face italic bold)))) 
	;;TODO FIXME HACK REVIEW DEPRECATED

	(use-package rainbow-delimiters :ensure t
		:hook ((emacs-lisp-mode . rainbow-delimiters-mode)
					 (c-mode . rainbow-delimiters-mode)))

	(use-package rainbow-mode :ensure t 
		:hook org-mode prog-mode)

#+end_src

